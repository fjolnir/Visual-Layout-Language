%{
    @import Foundation;
    @import ObjectiveC.runtime;
    #include <stdlib.h>
    #import "NSString+VLLExtensions.h"
    #import "NSInvocation+VLLExtensions.h"
    #import "NSLayoutConstraint+VLLExtensions.h"

    #define YYSTYPE id
    #define YY_CTX_LOCAL
//  #define YY_DEBUG

    // General purpose stack
    #define StackTop [yy->stack lastObject]
    #define StackPeek(ofs) yy->stack[[yy->stack count] + (ofs) - 1]
    #define PushStack(obj...) [yy->stack addObject:(obj)]
    #define PopStack() ({ id const top = StackTop; [yy->stack removeLastObject]; top; })
    
    // Orientation stack
    #define Orientation [yy->orientationStack lastObject]
    #define PushOrientation() [yy->orientationStack addObject:[yy->orientationStack lastObject]]
    #define SetOrientation(orien...) yy->orientationStack[[yy->orientationStack count]-1] = orien
    #define PopOrientation() ({ id const top = Orientation; [yy->orientationStack removeLastObject]; top; })
    
    // View stack
    #define CurrView ((VLLView *)[yy->viewStack lastObject])
    #define LastView yy->viewStack[[yy->viewStack count] - 2]
    #define PushView(obj...) [yy->viewStack addObject:(obj)]
    #define PopView() ({ VLLView * const top = CurrView; [yy->viewStack removeLastObject]; top; })
    
    #define VLLAxisToDimension(axis) (axis) == VLLLayoutConstraintAxisHorizontal ? NSLayoutAttributeWidth \
                                                                                 : NSLayoutAttributeHeight
    #define VLLAxisToLeadingEdge(axis) (axis) == VLLLayoutConstraintAxisHorizontal ? NSLayoutAttributeLeading \
                                                                                   : NSLayoutAttributeTop
    #define VLLAxisToTrailingEdge(axis) (axis) == VLLLayoutConstraintAxisHorizontal ? NSLayoutAttributeTrailing \
                                                                                    : NSLayoutAttributeBottom
    
    #define SyntaxError(...) do { \
        int line = 1; \
        for(int i = 0; i < yy->__pos; ++i) { \
            if(yy->__buf[i] == '\n') ++line; \
        } \
        NSString *msg = [NSString stringWithFormat:__VA_ARGS__]; \
        [NSException raise:@"Syntax error" format:@"Line %d: Syntax error! %@", line, (msg)]; \
    } while(0)
%}

Layout   = - Rule+ EOF ~{ SyntaxError(@""); }

Rule     = { PushStack([NSMutableDictionary dictionary]); PushOrientation(); }
           Axis?
           (PIPE c:Conn { StackTop[@"leadingConstraints"] = c; })?
           View {
               if(StackTop[@"leadingConstraints"]) {
                   for(NSDictionary *pred in StackTop[@"leadingConstraints"]) {
                        [NSLayoutConstraint vll_addLeadingEdgeConstraintsForAxis:[pred[@"orientation"] integerValue]
                                                                            view:$$
                                                                       superview:CurrView
                                                                       relatedBy:[pred[@"relation"] integerValue]
                                                                      multiplier:1
                                                                        constant:[pred[@"object"] doubleValue]
                                                                        priority:[pred[@"priority"] floatValue]];
                   }
               }
               PushStack($$);
           }
           (c:Conn connectedView:View {
               VLLView * const previousView = PopStack();
               PushStack(connectedView);
               
               for(NSDictionary *pred in c) {
                    [NSLayoutConstraint vll_addSpacingConstraintsForAxis:[pred[@"orientation"] integerValue]
                                                               firstView:StackTop
                                                              secondView:previousView
                                                               relatedBy:[pred[@"relation"] integerValue]
                                                              multiplier:1
                                                                constant:[pred[@"object"] doubleValue]
                                                                priority:[pred[@"priority"] floatValue]];
               }
           })*
           (c:Conn PIPE {
               for(NSDictionary *pred in c) {
                    [NSLayoutConstraint vll_addTrailingEdgeConstraintsForAxis:[pred[@"orientation"] integerValue]
                                                                         view:StackTop
                                                                    superview:CurrView
                                                                    relatedBy:[pred[@"relation"] integerValue]
                                                                   multiplier:1
                                                                     constant:[pred[@"object"] doubleValue]
                                                                     priority:[pred[@"priority"] floatValue]];
               }
           })?
           { PopStack(); $$ = PopStack(); PopOrientation(); }


## Views
View     = ViewDef | ViewRef

ViewDef  = LBRACKET
               klass:CONST ident:ViewIdent {
                   VLLView * const view = [NSClassFromString(klass) new];
                   view.translatesAutoresizingMaskIntoConstraints = NO;
                   if(!CurrView || CurrView == yy->container)
                       [yy->rootViews addObject:view];
                   [CurrView addSubview:view];
//                   NSLog(@"Creating %@ in %@", view, CurrView);
                   PushView(view);
                   PushStack(view); // Messages are sent to the object at the top of the stack
                   if(ident) yy->views[ident] = view;
               }
               (preds:PredicateList {
                   for(NSDictionary *pred in preds) {
                       [NSLayoutConstraint vll_addSizeConstraintsForAxis:[pred[@"orientation"] integerValue]
                                                                  onView:CurrView
                                                        toViewOrConstant:pred[@"object"]
                                                               relatedBy:[pred[@"relation"] integerValue]
                                                              multiplier:1
                                                                priority:[pred[@"priority"] integerValue]];
                   }
               })?
               Messages?
           RBRACKET ~{ SyntaxError(@"Unterminated view definition"); }
           (LBRACE
               Rule*
            RBRACE ~{ SyntaxError(@"Unterminated curly brace"); } )?
           { $$ = PopView(); PopStack(); }

ViewIdent =                   { $$ = nil; }
            (HASH ident:IDENT { $$ = ident; })?

ViewRef = LBRACKET view:IDENT { view = yy->views[view]; }
          (preds:PredicateList {
              for(NSDictionary *pred in preds) {
                  [NSLayoutConstraint vll_addSizeConstraintsForAxis:[pred[@"orientation"] integerValue]
                                                             onView:view
                                                   toViewOrConstant:pred[@"object"]
                                                          relatedBy:[pred[@"relation"] integerValue]
                                                         multiplier:1
                                                           priority:[pred[@"priority"] integerValue]];
              }
          })? RBRACKET ~{ SyntaxError(@"Unterminated view reference"); }
                        { $$ = view; }


## Message passing
Messages = Message (SEMICOLON Message)*
Message  = { PushStack(@{  @"selector": [NSMutableString string],
                          @"arguments": [NSMutableArray array] }); }
           ((name:SelPart COLON arg:Literal {
              [StackTop[@"selector"] appendFormat:@"%@:", name];
              [StackTop[@"arguments"] addObject:arg];
             }
             | name:SelPart ASGN arg:Literal {
                 [StackTop[@"selector"] appendFormat:@"set%@:", [name vll_capitalizedString]];
                 [StackTop[@"arguments"] addObject:arg];
             })+
            | name:SelPart { [StackTop[@"selector"] setString:name] })
           {
               NSDictionary * const msg = PopStack();
               $$ = [yy->parserObj _sendMessageTo:StackTop
                                         selector:NSSelectorFromString(msg[@"selector"])
                                        arguments:msg[@"arguments"]];
           }

SelPart  = IDENT|CONST


## Connections / Predicates
Conn     = DASH preds:Predicates DASH { $$ = preds; }
         | DASH { $$ = @[@{ @"object": @20, @"relation": @(NSLayoutRelationEqual), @"orientation": Orientation }]; }

Predicates = obj:ObjOfPred { $$ = @[@{ @"object": obj,
                                       @"relation": @(NSLayoutRelationEqual),
                                       @"orientation": Orientation }]; }
           | PredicateList

PredicateList = LPAREN { PushOrientation(); }
                    preds:Predicate { preds = [NSMutableArray arrayWithObject:preds]; }
                    (COMMA pred:Predicate { [preds addObject:pred]; })*
                RPAREN {
                    PopOrientation();
                    $$ = preds;
                }
Predicate = orientation:PredicateOrientation
            rel:Relation ~{ SyntaxError(@"Expected ==/>=/<="); }
            obj:ObjOfPred
            prio:Priority {
    $$ = @{ @"relation": rel,
            @"object": obj,
            @"priority": prio,
            @"orientation": orientation };
}

PredicateOrientation = [wW] - { $$ = @(VLLLayoutConstraintAxisHorizontal); }
                     | [hH] - { $$ = @(VLLLayoutConstraintAxisVertical); }

Priority = { $$ = @0 } (AT p:NUMBER ~{ SyntaxError(@"Incomplete priority"); }
                                     { $$ = p; })?
ObjOfPred = number:NUMBER { $$ = number; }
          | name:IDENT    { $$ = yy->views[name]; if(!$$) SyntaxError(@"View %@ doesn't exist", name); }


Axis     = 'V' COLON ~{ SyntaxError(@"Expected colon"); }
                      { $$ = @(VLLLayoutConstraintAxisVertical);   SetOrientation($$); }
         | 'H' COLON ~{ SyntaxError(@"Expected colon"); }
                      { $$ = @(VLLLayoutConstraintAxisHorizontal); SetOrientation($$); }
         | 'X' COLON ~{ SyntaxError(@"Expected colon"); }
                      { $$ = @(VLLLayoutConstraintAxisHorizontal | VLLLayoutConstraintAxisVertical);
                        SetOrientation($$); }


Relation  = LEQ { $$ = @(NSLayoutRelationLessThanOrEqual); }
          | GEQ { $$ = @(NSLayoutRelationGreaterThanOrEqual); }
          | EQ? { $$ = @(NSLayoutRelationEqual); }


## Literals
Literal   = NUMBER|STRING|Function|ViewObject|Object

Function  = name:CONST LPAREN {
                PushStack([NSMutableArray array]);
                name = [name lowercaseString];
            }
            (arg:Literal        { [StackTop addObject:arg]; }
             (COMMA arg:Literal { [StackTop addObject:arg]; })*)?
            RPAREN {
    $$ = [yy->parserObj _resolveFunction:name withParameters:PopStack()];
}
ViewObject = view:Object LBRACE  { PushView(view); PushStack(view); NSLog(@"Opening view obj %@", view); }
                             Rule*
                         RBRACE ~{ SyntaxError(@"Unterminated view definition object"); }
                                 { $$ = PopView(); PopStack();  NSLog(@"Closing view obj! %@", $$); }
Object = LBRACKET ( klass:CONST { PushStack(NSClassFromString(klass)); }
                  | obj:Object  { PushStack(obj); })
             m:Messages
         RBRACKET ~{ SyntaxError(@"Unterminated message"); }
                   { $$ = m; PopStack(); }


## Tokens
IDENT     = <[a-z] [a-zA-Z_0-9]*> -   { $$ = @(yytext); }
CONST     = <[A-Z] [a-zA-Z_0-9]*> -   { $$ = @(yytext); }
STRING    = '"' < (!'"' .)* > '"' -   { $$ = @(yytext); }
NUMBER    = <[0-9]+ ('.' [0-9]+)* > - { $$ = @(strtod(yytext, NULL)); }

LEQ       = '<=' -
GEQ       = '>=' -
EQ        = '==' -
ASGN      = '='  -
COLON     = ':'  -
SEMICOLON = ';'  -
COMMA     = ','  -
HASH      = '#'  -
LBRACE    = '{'  -
RBRACE    = '}'  -
LBRACKET  = '['  -
RBRACKET  = ']'  -
LPAREN    = '('  -
RPAREN    = ')'  -
DASH      = '-'  -
PIPE      = '|'  -
AT        = '@'  -
-         = ( SPACE | COMMENT )*
SPACE     = ' ' | '\t' | EOL
COMMENT   = '\\' ( !EOL . )* EOL
EOL       = '\r\n' | '\n' | '\r'
EOF       = !.
