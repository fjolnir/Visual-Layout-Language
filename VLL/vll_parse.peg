%{
    @import Foundation;
    @import ObjectiveC.runtime;
    #include <stdlib.h>
    #import "NSString+VLLExtensions.h"
    #import "NSInvocation+VLLExtensions.h"

    #define YYSTYPE id
    #define YY_CTX_LOCAL
//  #define YY_DEBUG

    // General purpose stack
    #define StackTop [yy->stack lastObject]
    #define StackPeek(ofs) yy->stack[[yy->stack count] + (ofs) - 1]
    #define PushStack(obj...) [yy->stack addObject:(obj)]
    #define PopStack() StackTop; [yy->stack removeLastObject]
    #define ReplaceStackTop(val) do { id repl = val; PopStack(); PushStack(repl); } while(0)
    
    // Orientation stack
    #define Orientation [[yy->orientationStack lastObject] integerValue]
    #define PushOrientation(orien...) [yy->orientationStack addObject:@(orien)]
    #define PopOrientation() StackTop; [yy->orientationStack removeLastObject]
    
    // View stack
    #define CurrView ((VLLView *)[yy->viewStack lastObject])
    #define LastView yy->viewStack[[yy->viewStack count] - 2]
    #define PushView(obj...) [yy->viewStack addObject:(obj)]
    #define PopView() CurrView; [yy->viewStack removeLastObject]
%}

Layout   = Rule+ EOF

Rule     = { PushStack([NSMutableDictionary dictionary]) }
           Axis { PushOrientation([$$ integerValue]); }
           (PIPE c:Conn { StackTop[@"leadingConstraints"] = c; })?
           view:View {
               PushView(view);
               if(StackTop[@"leadingConstraints"]) {
                   NSLayoutAttribute attr = NSLayoutAttributeLeading;
                   if(Orientation == VLLLayoutConstraintAxisVertical)
                       attr = NSLayoutAttributeTop;
                   for(NSDictionary *pred in StackTop[@"leadingConstraints"]) {
                       NSLayoutConstraint * const constr = [NSLayoutConstraint
                                                            constraintWithItem:CurrView
                                                            attribute:attr
                                                            relatedBy:[pred[@"relation"] integerValue]
                                                            toItem:LastView
                                                            attribute:attr
                                                            multiplier:1
                                                            constant:[pred[@"object"] doubleValue]];
                       if([pred[@"priority"] floatValue] > 0)
                           constr.priority = [pred[@"priority"] floatValue];
                       [LastView addConstraint:constr];
                   }
               }
           }
           (Conn connectedView:View {
               VLLView * const lastView = PopView();
               PushView(connectedView);
               
               NSLayoutAttribute attrA = NSLayoutAttributeTrailing;
               NSLayoutAttribute attrB = NSLayoutAttributeLeading;
               if(Orientation == VLLLayoutConstraintAxisVertical) {
                   attrA = NSLayoutAttributeBottom;
                   attrB = NSLayoutAttributeTop;
               }
               for(NSDictionary *pred in c) {
                   NSLayoutConstraint * const constr = [NSLayoutConstraint
                                                        constraintWithItem:CurrView
                                                        attribute:attrB
                                                        relatedBy:[pred[@"relation"] integerValue]
                                                        toItem:lastView
                                                        attribute:attrA
                                                        multiplier:1
                                                        constant:[pred[@"object"] doubleValue]];
                   if([pred[@"priority"] floatValue] > 0)
                       constr.priority = [pred[@"priority"] floatValue];
                   [LastView addConstraint:constr];
               }
           })*
           (c:Conn PIPE {
               NSLayoutAttribute attr = NSLayoutAttributeTrailing;
               if(Orientation == VLLLayoutConstraintAxisVertical)
                   attr = NSLayoutAttributeBottom;
               for(NSDictionary *pred in c) {
                   NSLayoutConstraint * const constr = [NSLayoutConstraint
                                                        constraintWithItem:LastView
                                                        attribute:attr
                                                        relatedBy:[pred[@"relation"] integerValue]
                                                        toItem:CurrView
                                                        attribute:attr
                                                        multiplier:1
                                                        constant:[pred[@"object"] doubleValue]];
                   if([pred[@"priority"] floatValue] > 0)
                       constr.priority = [pred[@"priority"] floatValue];
                   [LastView addConstraint:constr];
               }
           })?
           { $$ = PopView(); PopOrientation(); }

View     = ViewDef | ViewRef

ViewDef  = LBRACKET
               klass:CONST ident:ViewIdent {
                   VLLView * const view = [NSClassFromString(klass) new];
                   view.translatesAutoresizingMaskIntoConstraints = NO;
                   if(!CurrView || CurrView == yy->container)
                       [yy->rootViews addObject:view];
                   [CurrView addSubview:view];
                   PushView(view);
                   yy->views[ident] = view;
               }
               Messages?
               (preds:PredicateList {
                   NSLayoutAttribute attr = Orientation == VLLLayoutConstraintAxisHorizontal
                                          ? NSLayoutAttributeWidth
                                          : NSLayoutAttributeHeight;

                   for(NSDictionary *pred in preds) {
                       NSLayoutConstraint * const constr = [NSLayoutConstraint
                                                            constraintWithItem:CurrView
                                                            attribute:attr
                                                            relatedBy:[pred[@"relation"] integerValue]
                                                            toItem:nil
                                                            attribute:NSLayoutAttributeNotAnAttribute
                                                            multiplier:1
                                                            constant:[pred[@"object"] doubleValue]];
                       [LastView addConstraint:constr];
                   }
               })?
           RBRACKET
           (LBRACE
               rule:Rule*
            RBRACE)? { $$ = PopView(); }

ViewIdent =                   { $$ = [[NSUUID UUID] UUIDString]; }
            (HASH ident:IDENT { $$ = ident; })?

ViewRef = LBRACKET ident:IDENT { PushStack(yy->views[ident]); }
          (preds:PredicateList {
              NSLayoutAttribute attr = (Orientation == VLLLayoutConstraintAxisHorizontal)
                                     ? NSLayoutAttributeWidth
                                     : NSLayoutAttributeHeight;
              
              for(NSDictionary *pred in preds) {
                  NSLayoutConstraint * const constr = [NSLayoutConstraint
                                                       constraintWithItem:StackTop
                                                       attribute:attr
                                                       relatedBy:[pred[@"relation"] integerValue]
                                                       toItem:nil
                                                       attribute:NSLayoutAttributeNotAnAttribute
                                                       multiplier:1
                                                       constant:[pred[@"object"] doubleValue]];
                  [LastView addConstraint:constr];
              }
          })? RBRACKET { $$ = PopStack(); }

Messages = Message (SEMICOLON Message)*
Message  = { PushStack(@{  @"selector": [NSMutableString string],
                          @"arguments": [NSMutableArray array] }); }
           (name:SelPart COLON arg:Literal {
             [StackTop[@"selector"] appendFormat:@"%@:", name];
             [StackTop[@"arguments"] addObject:arg];
            }
            | name:SelPart ASGN arg:Literal {
                [StackTop[@"selector"] appendFormat:@"set%@:", [name vll_capitalizedString]];
                [StackTop[@"arguments"] addObject:arg];
            })+ {
                $$ = PopStack();
                SEL const sel = NSSelectorFromString($$[@"selector"]);
                NSInvocation * const invoc = [NSInvocation invocationWithMethodSignature:[CurrView methodSignatureForSelector:sel]];
                invoc.target = CurrView;
                invoc.selector = sel;
                int i = 2;
                for(id argument in $$[@"arguments"]) {
                    [invoc vll_setArgument:argument atIndex:i++];
                }
                [invoc invoke];
            }
SelPart  = IDENT|CONST

Conn     = DASH preds:PredicateList DASH { $$ = preds; }
         | DASH { $$ = @[@{ @"object": @20, @"relation": @(NSLayoutRelationEqual) }]; }

PredicateList = obj:ObjOfPred { $$ = @[@{ @"object": yy->views[obj] ?: obj,
                                          @"relation": @(NSLayoutRelationEqual) }]; }
              | LPAREN
                    pred:Predicate { PushStack([NSMutableArray arrayWithObject:pred]); }
                    (COMMA pred:Predicate { [StackTop addObject:pred]; })*
                RPAREN {
                    $$ = PopStack();
                }
Predicate = rel:Relation obj:ObjOfPred prio:Priority {
    $$ = @{ @"relation": rel,
            @"object": yy->views[obj] ?: obj,
            @"priority": prio };
}

Priority = { $$ = @50 }
           (AT p:NUMBER { $$ = p; })?
ObjOfPred = NUMBER|IDENT


Axis     = 'V' COLON    { $$ = @(VLLLayoutConstraintAxisVertical);   }
         | ('H' COLON)? { $$ = @(VLLLayoutConstraintAxisHorizontal); }

Relation  = LEQ { $$ = @(NSLayoutRelationLessThanOrEqual); }
          | GEQ { $$ = @(NSLayoutRelationGreaterThanOrEqual); }
          | EQ? { $$ = @(NSLayoutRelationEqual); }
     
Literal   = NUMBER|STRING|COLOR

# Tokens
IDENT     = <[a-z] [a-zA-Z_0-9]*> SPACING   { $$ = @(yytext); }
CONST     = <[A-Z] [a-zA-Z_0-9]*> SPACING   { $$ = @(yytext); }
STRING    = '"' < (!'"' .)* > '"' SPACING   { $$ = @(yytext); }
NUMBER    = <[0-9]+ ('.' [0-9]+)* > SPACING { $$ = @(strtod(yytext, NULL)); }
COLOR     = '$RGB' LPAREN r:NUMBER COMMA g:NUMBER COMMA b:NUMBER RPAREN {
    $$ = [VLLColor colorWithRed:[r floatValue]
                         green:[g floatValue]
                          blue:[b floatValue]
                         alpha:1]; }
          | '$RGBA' LPAREN r:NUMBER COMMA g:NUMBER COMMA b:NUMBER COMMA a:NUMBER RPAREN {
    $$ = [VLLColor colorWithRed:[r floatValue]
                         green:[g floatValue]
                          blue:[b floatValue]
                         alpha:[a floatValue]]; }
          | '$HSB' LPAREN h:NUMBER COMMA s:NUMBER COMMA b:NUMBER RPAREN {
    $$ = [VLLColor colorWithHue:[h floatValue]
                    saturation:[s floatValue]
                    brightness:[b floatValue]
                         alpha:1]; }
          | '$HSBA' LPAREN h:NUMBER COMMA s:NUMBER COMMA b:NUMBER COMMA a:NUMBER RPAREN {
    $$ = [VLLColor colorWithHue:[r floatValue]
                    saturation:[g floatValue]
                    brightness:[b floatValue]
                         alpha:[a floatValue]]; }
OBJECT    = '$[' CONST Message ']'
    

LEQ       = '<=' SPACING
GEQ       = '>=' SPACING
EQ        = '==' SPACING
ASGN      = '='  SPACING
COLON     = ':'  SPACING
SEMICOLON = ';'  SPACING
COMMA     = ','  SPACING
HASH      = '#'  SPACING
LBRACE    = '{'  SPACING
RBRACE    = '}'  SPACING
LBRACKET  = '['  SPACING
RBRACKET  = ']'  SPACING
LPAREN    = '('  SPACING
RPAREN    = ')'  SPACING
DASH      = '-'  SPACING
PIPE      = '|'  SPACING
AT        = '@'  SPACING
SPACING   = ( SPACE | COMMENT )*
SPACE     = ' ' | '\t' | EOL
COMMENT   = '\\' ( !EOL . )* EOL
EOL       = '\r\n' | '\n' | '\r'
EOF       = !.
